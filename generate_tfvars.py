#!/usr/bin/env python3
"""
Generate terraform.tfvars from values.yaml
Converts YAML configuration to Terraform variable format
"""

import yaml
import json
import sys
import os
from typing import Any, Dict, List, Union

def yaml_to_tfvars_value(value: Any) -> str:
    """Convert a Python value to Terraform tfvars format"""
    if isinstance(value, str):
        return f'"{value}"'
    elif isinstance(value, bool):
        return "true" if value else "false"
    elif isinstance(value, (int, float)):
        return str(value)
    elif isinstance(value, list):
        if not value:
            return "[]"
        # Check if it's a list of objects
        if isinstance(value[0], dict):
            items = []
            for item in value:
                items.append(yaml_to_tfvars_value(item))
            return f"[\n{',\n'.join(items)}\n]"
        else:
            # Simple list
            items = [yaml_to_tfvars_value(item) for item in value]
            return f"[{', '.join(items)}]"
    elif isinstance(value, dict):
        items = []
        for k, v in value.items():
            items.append(f'{k} = {yaml_to_tfvars_value(v)}')
        return f"{{\n" + ",\n".join(f"  {item}" for item in items) + "\n}"
    else:
        return str(value)

def convert_yaml_to_tfvars(yaml_file: str, tfvars_file: str) -> None:
    """Convert YAML file to Terraform tfvars format"""
    try:
        with open(yaml_file, 'r', encoding='utf-8') as f:
            data = yaml.safe_load(f)
        
        if not data:
            print(f"Warning: {yaml_file} is empty or invalid")
            return
        
        with open(tfvars_file, 'w', encoding='utf-8') as f:
            f.write("# Auto-generated from values.yaml\n")
            f.write("# Do not edit this file manually\n\n")
            
            for key, value in data.items():
                tfvars_value = yaml_to_tfvars_value(value)
                f.write(f'{key} = {tfvars_value}\n\n')
        
        print(f"Successfully generated {tfvars_file} from {yaml_file}")
        
    except FileNotFoundError:
        print(f"Error: {yaml_file} not found")
        sys.exit(1)
    except yaml.YAMLError as e:
        print(f"Error parsing YAML: {e}")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

def main():
    """Main function"""
    yaml_file = "values.yaml"
    tfvars_file = "terraform.tfvars"
    
    # Check if values.yaml exists
    if not os.path.exists(yaml_file):
        print(f"Error: {yaml_file} not found in current directory")
        sys.exit(1)
    
    # Convert YAML to tfvars
    convert_yaml_to_tfvars(yaml_file, tfvars_file)
    
    # Validate the generated file
    if os.path.exists(tfvars_file):
        print(f"Generated {tfvars_file} successfully!")
        print("You can now run: terraform init && terraform plan")
    else:
        print("Error: Failed to generate terraform.tfvars")
        sys.exit(1)

if __name__ == "__main__":
    main()
